{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2024-03-21T16:44:36.486658900Z",
     "start_time": "2024-03-21T16:44:36.319328900Z"
    }
   },
   "outputs": [],
   "source": [
    "import networkx\n",
    "import networkx as nx\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1 1 0]\n",
      " [1 0 1 0]\n",
      " [1 1 0 1]\n",
      " [0 0 1 0]]\n",
      "Graph with 4 nodes and 4 edges\n"
     ]
    }
   ],
   "source": [
    "G = nx.Graph()\n",
    "\n",
    "blue, orange, green = \"#1f77b4\", \"#ff7f0e\",\"#2ca02c\"\n",
    "\n",
    "G.add_nodes_from([(1, {\"color\": blue}),\n",
    "                  (2, {\"color\": orange}),\n",
    "                  (3, {\"color\": blue}),\n",
    "                  (4, {\"color\": green})])\n",
    "G.add_edges_from([(1, 2),(2, 3),(1, 3),(3, 4)])\n",
    "A = np.asarray(nx.adjacency_matrix(G).todense())\n",
    "print(A)\n",
    "print(G)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-21T16:44:36.548172Z",
     "start_time": "2024-03-21T16:44:36.487658500Z"
    }
   },
   "id": "5ffca656526d7f4d",
   "execution_count": 3
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "data": {
      "text/plain": "dict_values(['#1f77b4', '#ff7f0e', '#1f77b4', '#2ca02c'])"
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nx.get_node_attributes(G, 'color').values()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-21T16:44:36.566172500Z",
     "start_time": "2024-03-21T16:44:36.549172100Z"
    }
   },
   "id": "c5c0e2e9d8b997bc",
   "execution_count": 4
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "\n",
    "def one_hot_on_attribute(G, attribute:str):\n",
    "    \"\"\"\n",
    "    Create a one hot encoding where the mapping dictionary determines the column index of the one hot encoding. \n",
    "    The rows represent each node in the graph. The attribute is the node information that we want to categorise.\n",
    "    \n",
    "    Parameters:\n",
    "    G (nx.Graph or nx.DiGraph): The graph to be processed.\n",
    "    attribute (str): The attribute of the node to be categorised.\n",
    "    \n",
    "    Returns:\n",
    "    np.array: A one hot encoding of the node attributes.\n",
    "    \n",
    "    Example:\n",
    "     G = nx.Graph()\n",
    "     blue, orange, green = \"#1f77b4\", \"#ff7f0e\",\"#2ca02c\"\n",
    "     G.add_nodes_from([(1, {\"color\": blue}),\n",
    "                       (2, {\"color\": orange}),\n",
    "                       (3, {\"color\": blue}),\n",
    "                       (4, {\"color\": green})])\n",
    "     G.add_edges_from([(1, 2),(2, 3),(1, 3),(3, 4)])\n",
    "     one_hot_encoding = one_hot_on_attribute(G, 'color')\n",
    "     print(one_hot_encoding)\n",
    "    [[1. 0. 0.]\n",
    "     [0. 1. 0.]\n",
    "     [1. 0. 0.]\n",
    "     [0. 0. 1.]]\n",
    "    \"\"\"\n",
    "    set_attributes = {v:i for i, v in enumerate(set(nx.get_node_attributes(G, 'color').values()))}\n",
    "    one_hot_idx = np.array([set_attributes[v] for v in nx.get_node_attributes(G, attribute).values()])\n",
    "    one_hot_encoding = np.zeros((one_hot_idx.size, len(set_attributes)))\n",
    "    one_hot_encoding[np.arange(one_hot_idx.size), one_hot_idx] = 1\n",
    "    return one_hot_encoding\n",
    "\n",
    "X = one_hot_on_attribute(G, 'color')"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-21T16:44:36.600175Z",
     "start_time": "2024-03-21T16:44:36.567171700Z"
    }
   },
   "id": "8f7273afb01d8349",
   "execution_count": 5
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "data": {
      "text/plain": "array([[0., 1., 0.],\n       [1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])"
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-21T16:44:36.601176100Z",
     "start_time": "2024-03-21T16:44:36.580172200Z"
    }
   },
   "id": "50d4796697d5b88d",
   "execution_count": 6
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "color_map = nx.get_node_attributes(G, 'color').values()\n",
    "nx.draw(G, with_labels=True, node_color=color_map)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-21T16:44:37.146102300Z",
     "start_time": "2024-03-21T16:44:36.597173400Z"
    }
   },
   "id": "909b6daf111c4eb",
   "execution_count": 7
  },
  {
   "cell_type": "markdown",
   "source": [
    "Perform the forward pass, computing the convolutions"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "81fb321a9b8c5812"
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "data": {
      "text/plain": "array([[1.5671626 , 1.34870191, 1.60341936, 2.04787687, 1.89622698,\n        1.86152984],\n       [0.96199906, 0.44191655, 0.29233569, 2.28562923, 2.27684944,\n        0.96925725],\n       [1.83195168, 2.24491518, 1.84508857, 2.49509527, 2.78051089,\n        2.32248305],\n       [1.02554138, 0.98042514, 0.10951637, 1.32106559, 1.01492945,\n        1.23134758]])"
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_in, f_out = X.shape[1], 6\n",
    "W_1 = np.random.rand(f_in, f_out)\n",
    "W_2 = np.random.rand(f_in, f_out)\n",
    "h = X @ W_1 + ((A @ X) @ W_2)\n",
    "h"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-21T17:06:11.133189100Z",
     "start_time": "2024-03-21T17:06:11.110047800Z"
    }
   },
   "id": "aa3f2a797476d66d",
   "execution_count": 14
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "data": {
      "text/plain": "(4, 3)"
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-21T17:07:28.069382500Z",
     "start_time": "2024-03-21T17:07:28.056949300Z"
    }
   },
   "id": "afecb6d80a012a28",
   "execution_count": 18
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
