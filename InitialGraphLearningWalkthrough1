{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2024-03-22T15:12:50.430766Z",
     "start_time": "2024-03-22T15:12:50.274313300Z"
    }
   },
   "outputs": [],
   "source": [
    "import networkx\n",
    "import networkx as nx\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1 1 0]\n",
      " [1 0 1 0]\n",
      " [1 1 0 1]\n",
      " [0 0 1 0]]\n",
      "Graph with 4 nodes and 4 edges\n"
     ]
    }
   ],
   "source": [
    "G = nx.Graph()\n",
    "\n",
    "blue, orange, green = \"#1f77b4\", \"#ff7f0e\",\"#2ca02c\"\n",
    "\n",
    "G.add_nodes_from([(1, {\"color\": blue}),\n",
    "                  (2, {\"color\": orange}),\n",
    "                  (3, {\"color\": blue}),\n",
    "                  (4, {\"color\": green})])\n",
    "G.add_edges_from([(1, 2),(2, 3),(1, 3),(3, 4)])\n",
    "A = np.asarray(nx.adjacency_matrix(G).todense())\n",
    "print(A)\n",
    "print(G)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T15:12:50.512437200Z",
     "start_time": "2024-03-22T15:12:50.427762200Z"
    }
   },
   "id": "5ffca656526d7f4d",
   "execution_count": 2
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "data": {
      "text/plain": "dict_values(['#1f77b4', '#ff7f0e', '#1f77b4', '#2ca02c'])"
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nx.get_node_attributes(G, 'color').values()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T15:12:50.518989500Z",
     "start_time": "2024-03-22T15:12:50.505102700Z"
    }
   },
   "id": "c5c0e2e9d8b997bc",
   "execution_count": 3
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "\n",
    "def one_hot_on_attribute(G, attribute:str):\n",
    "    \"\"\"\n",
    "    Create a one hot encoding where the mapping dictionary determines the column index of the one hot encoding. \n",
    "    The rows represent each node in the graph. The attribute is the node information that we want to categorise.\n",
    "    \n",
    "    Parameters:\n",
    "    G (nx.Graph or nx.DiGraph): The graph to be processed.\n",
    "    attribute (str): The attribute of the node to be categorised.\n",
    "    \n",
    "    Returns:\n",
    "    np.array: A one hot encoding of the node attributes.\n",
    "    \n",
    "    Example:\n",
    "     G = nx.Graph()\n",
    "     blue, orange, green = \"#1f77b4\", \"#ff7f0e\",\"#2ca02c\"\n",
    "     G.add_nodes_from([(1, {\"color\": blue}),\n",
    "                       (2, {\"color\": orange}),\n",
    "                       (3, {\"color\": blue}),\n",
    "                       (4, {\"color\": green})])\n",
    "     G.add_edges_from([(1, 2),(2, 3),(1, 3),(3, 4)])\n",
    "     one_hot_encoding = one_hot_on_attribute(G, 'color')\n",
    "     print(one_hot_encoding)\n",
    "    [[1. 0. 0.]\n",
    "     [0. 1. 0.]\n",
    "     [1. 0. 0.]\n",
    "     [0. 0. 1.]]\n",
    "    \"\"\"\n",
    "    set_attributes = {v:i for i, v in enumerate(set(nx.get_node_attributes(G, 'color').values()))}\n",
    "    one_hot_idx = np.array([set_attributes[v] for v in nx.get_node_attributes(G, attribute).values()])\n",
    "    one_hot_encoding = np.zeros((one_hot_idx.size, len(set_attributes)))\n",
    "    one_hot_encoding[np.arange(one_hot_idx.size), one_hot_idx] = 1\n",
    "    return one_hot_encoding\n",
    "\n",
    "X = one_hot_on_attribute(G, 'color')"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T15:12:50.554843400Z",
     "start_time": "2024-03-22T15:12:50.522036200Z"
    }
   },
   "id": "8f7273afb01d8349",
   "execution_count": 4
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "data": {
      "text/plain": "array([[0., 1., 0.],\n       [1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])"
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T15:12:50.555843200Z",
     "start_time": "2024-03-22T15:12:50.534943400Z"
    }
   },
   "id": "50d4796697d5b88d",
   "execution_count": 5
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "color_map = nx.get_node_attributes(G, 'color').values()\n",
    "nx.draw(G, with_labels=True, node_color=color_map)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T15:12:50.860756600Z",
     "start_time": "2024-03-22T15:12:50.549842100Z"
    }
   },
   "id": "909b6daf111c4eb",
   "execution_count": 6
  },
  {
   "cell_type": "markdown",
   "source": [
    "# Perform the forward pass, computing the convolutions\n",
    "this is what the forward pass looks like"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "81fb321a9b8c5812"
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "data": {
      "text/plain": "array([[1.63628933, 1.51508951, 0.43080575, 1.86729028, 1.78396936,\n        1.4987796 ],\n       [0.78460711, 1.5605979 , 0.75157064, 2.28993653, 1.27843624,\n        1.34898632],\n       [1.7299771 , 2.12787516, 0.46557589, 2.47490721, 2.4376889 ,\n        1.81885299],\n       [0.85451416, 0.94512938, 0.26458349, 1.6827569 , 0.34787869,\n        1.48556385]])"
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_in, f_out = X.shape[1], 6\n",
    "W_1 = np.random.rand(f_in, f_out)\n",
    "W_2 = np.random.rand(f_in, f_out)\n",
    "h = X @ W_1 + ((A @ X) @ W_2)\n",
    "h"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T15:12:50.921915900Z",
     "start_time": "2024-03-22T15:12:50.863758Z"
    }
   },
   "id": "aa3f2a797476d66d",
   "execution_count": 7
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T15:12:50.922918300Z",
     "start_time": "2024-03-22T15:12:50.881140600Z"
    }
   },
   "id": "afecb6d80a012a28",
   "execution_count": 7
  },
  {
   "cell_type": "markdown",
   "source": [
    "# Write the Graph Convolution from Scratch"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "c0b64f1dca0b9acd"
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import torch\n",
    "from torch.nn.parameter import Parameter\n",
    "import numpy as np\n",
    "import torch.nn.functional as F\n"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T15:12:52.125768400Z",
     "start_time": "2024-03-22T15:12:50.892199200Z"
    }
   },
   "id": "d3bc9f496dbfb92f",
   "execution_count": 8
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "class BasicConvolutionLayer(torch.nn.Module):\n",
    "    def __init__(self, number_of_features, encoding_size):\n",
    "        super().__init__()\n",
    "        self.n_features = number_of_features\n",
    "        self.encoding_size = encoding_size\n",
    "        \n",
    "        self.W2 = Parameter(torch.rand((number_of_features, encoding_size), dtype=torch.float32))\n",
    "        self.W1 = Parameter(torch.rand((number_of_features, encoding_size), dtype=torch.float32))\n",
    "        self.bias = Parameter(torch.zeros(encoding_size, dtype=torch.float32))\n",
    "        \n",
    "    def forward(self, X, A):\n",
    "        # Node updates in matrix form XW_1 + AXW_2 + b\n",
    "        # the message term is AXW_2 and the aggregate term is XW_1\n",
    "        #the message term\n",
    "        xw_2 = torch.mm(X, self.W2)\n",
    "        axw_2 = torch.mm(A, xw_2) # use the adjacency matrix to filter the propagated messages\n",
    "        #the aggregate term\n",
    "        axw_1 = torch.mm(X, self.W1)\n",
    "        return axw_1 + axw_2 + self.bias\n",
    " "
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T16:53:49.073035500Z",
     "start_time": "2024-03-22T16:53:49.055956500Z"
    }
   },
   "id": "872820aea4c9d317",
   "execution_count": 24
  },
  {
   "cell_type": "code",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X shape: (4, 3)\n",
      "A shape: (4, 4)\n"
     ]
    },
    {
     "data": {
      "text/plain": "torch.Size([4, 8])"
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(f\"X shape: {X.shape}\")\n",
    "print(f\"A shape: {A.shape}\")\n",
    "# here the in channels is the number of columns in X, or the number of features\n",
    "# the out channels is the number of latent features we wish to encode.\n",
    "conv = BasicConvolutionLayer(number_of_features=3, encoding_size=8)\n",
    "\n",
    "M = conv.forward(torch.tensor(X, dtype=torch.float32), torch.tensor(A, dtype=torch.float32))\n",
    "M.shape"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T16:39:07.275858900Z",
     "start_time": "2024-03-22T16:39:07.259836100Z"
    }
   },
   "id": "4ecd281f66d4e9e1",
   "execution_count": 23
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "def global_sum_pool(X, batch_mat):\n",
    "    if batch_mat is None or batch_mat.dim() == 1:\n",
    "        return torch.sum(X, dim=0).unsqueeze(0)\n",
    "    else:\n",
    "        return torch.mm(batch_mat, X)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T16:57:58.687702500Z",
     "start_time": "2024-03-22T16:57:58.669529Z"
    }
   },
   "id": "da51c5192c841f8e",
   "execution_count": 25
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "class NodeNetwork(torch.nn.Module):\n",
    "    def __init__(self, number_of_features):\n",
    "        super().__init__()\n",
    "        self.conv1=BasicConvolutionLayer(number_of_features, 32)\n",
    "        self.conv2 =BasicConvolutionLayer(32, 32)\n",
    "        self.fc_1 = torch.nn.Linear(32,16)\n",
    "        self.out_layer = torch.nn.Linear(16,2)\n",
    "        \n",
    "    def forward(self, A, X, batch_mat):\n",
    "        x = F.relu(self.conv1(X, A)) # perform first convolution\n",
    "        x = F.relu(self.conv2(x, A)) # perform second convolution\n",
    "        output = global_sum_pool(x, batch_mat) # pool the node embeddings\n",
    "        output = self.fc_1(output) #run the pooled embeddings through two fully connected layers\n",
    "        output = self.out_layer(output) #run second fully connected layer\n",
    "        return F.softmax(output, dim=1)\n",
    "        "
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-03-22T16:59:04.822679100Z",
     "start_time": "2024-03-22T16:59:04.806138100Z"
    }
   },
   "id": "cbef31767eb66871",
   "execution_count": 26
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "start_time": "2024-03-22T15:12:52.518622700Z"
    }
   },
   "id": "d7ceebb91980c62f",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "start_time": "2024-03-22T15:12:52.519636100Z"
    }
   },
   "id": "ed07b580db870e1f",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "start_time": "2024-03-22T15:12:52.520636200Z"
    }
   },
   "id": "c27c93a4a7687aaf"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
